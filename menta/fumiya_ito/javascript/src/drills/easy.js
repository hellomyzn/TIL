// ====================================================
// 定数定義
// ====================================================

// ①値に"りんご"を持つ、定数appleを定義してください。
// ②定義した定数appleの値をログで確認してください。
// ここに処理を書いてください。
const apple = "りんご";
console.log(apple);

// ①値に70を持つ、変数weightを定義してください。
// ②定義したweightに60を代入してください。
// ③定義したweightの値をログで確認してください。
// ここに処理を書いてください。
var weight = 70;
weight = 60;
console.log(weight);

// ====================================================
// 文字列
// ====================================================

// ----------------------------------------------------
// 文字列を変数定義
// ----------------------------------------------------
// 文字列"あいうえお"を変数で定義してください。
// ①定数answerに代入してください。

// let aiueo =
// const answer =

// ----------------------------------------------------
// 文字列変数を変更
// ----------------------------------------------------
// 文字列"あいうえお"を"かきくけこ"に変更してください。
// ①変数answerにあいうえおを格納してください。
// ②変数answerの値あいうえおをかきくけこに変更してください。

// let answer =
// answer =

// ----------------------------------------------------
// 2つの文字列を連結
// ----------------------------------------------------
// 文字列"あいうえお"と"かきくけこ"の2つの文字列を連結してください。
// ①定数str1にあいうえおを代入してください。
// ②定数str２にかきくけこを代入してください。
// ③定数answerにstr1とstr2を連結した値を代入してください。

// const str1 =
// const str2 =
// const answer =

// ----------------------------------------------------
// 部分文字列抽出
// ----------------------------------------------------
// 与えられた文字列の部分文字列を抽出してください。
// ①substringメソッドを使用して、課題を解いてみましょう。
// ②正しく実行できているか、ログで出力して確認してください

// const str = 'Menta';
// // 1文字目から3文字目だけコンソールに出力してください
// console.log(str);
// // 4文字目以降コンソールに出力してください
// console.log(str);

// const alphabet = "abcde";
// // 最後の文字だけコンソールに出力してください
// console.log(alphabet);

// ====================================================
// 関数
// ====================================================
// ----------------------------------------------------
// 引数を2倍にする関数
// ----------------------------------------------------
// ①仮引数numを持つ関数twiceを定義してください。
// ②仮引数を2倍して返してください。
// ③関数twiceに実引数3を渡して実行し、返り値をログ出力してください。
// ①②に従って関数を定義してください。

// const twice = () => {
// }
// // ③ログ出力してください。
// console.log();

// ----------------------------------------------------
// 引数を+1する関数
// ----------------------------------------------------
// ①仮引数numを持つ関数addOneを定義してください。
// ②仮引数を+1して返してください。
// ③関数addOneに実引数3を渡して実行し、返り値をログ出力してください。
// ①②に従って関数を定義してください。

// const addOne = () => {
//   // ここに処理を書いてください。
// }
// // ③ログ出力してください。
// console.log();

// ----------------------------------------------------
// 引数を-1する関数
// ----------------------------------------------------
// ①仮引数numを持つ関数minusOneを定義してください。
// ②仮引数を-1して返してください。
// ③関数minusOneに実引数5を渡して実行し、返り値をログ出力してください。
// ①②に従って関数を定義してください。

// const minusOne = () => {
//   // ここに処理を書いてください。
// }
// // ③ログ出力してください。
// console.log();

// ----------------------------------------------------
// 引数文字列の文字数を返す関数
// ----------------------------------------------------
// ①仮引数strを持つ関数getLengthを定義してください。
// ②仮引数strの文字数を返してください。
// ③関数getLengthに実引数"apple"を渡して実行し、返り値をログ出力してください。

// ----------------------------------------------------
// 引数の文字数が10文字未満か判定する関数
// ----------------------------------------------------
// 引数の文字数が10文字未満ならtrue,10文字以上だったらfalseを返す関数を作ってください。
// ①仮引数strを持つ関数judgeLengthを定義してください。
// ②仮引数strの文字数が10文字未満ならtrue,10文字以上だったらfalseを返してください。
// ③関数getLengthに実引数"apple"を渡して実行し、返り値をログ出力してください。
// ①②に従って関数を定義してください。

// const judgeLength = () => {
//   // ここに処理を書いてください。

// }
// // ③ログ出力してください。
// console.log();

// ----------------------------------------------------
// 引数の文字数を判定する関数
// ----------------------------------------------------
// 引数の文字数が5文字以上かつ10文字未満ならtrueを返す関数を作ってください。
// ①仮引数strを持つ関数judgeLengthを定義してください。
// ②仮引数strの文字数が5文字以上かつ,10文字未満だったらtrueを返してください。
// ③関数getLengthに実引数"apple"を渡して実行し、返り値をログ出力してください。
// ①②に従って関数を定義してください。

// const judgeLength = () => {
//   // ここに処理を書いてください。

// }
// // ③ログ出力してください。
// console.log();

// ----------------------------------------------------
// 2つの引数を合計する関数
// ----------------------------------------------------
// 2つの引数を合計する関数を作ってください。
// ①仮引数num1, num2を持つ関数getSumを定義してください。
// ②仮引数num1とnum2の合計値を返してください。
// ③関数getSumに実引数3, 2を渡して実行し、返り値をログ出力してください。
// ①②に従って関数を定義してください。

// const getSum = () => {
//   // ここに処理を書いてください。
// }
// // ③ログ出力してください。
// console.log();

// ----------------------------------------------------
// 2つの引数の文字列を結合する関数
// ----------------------------------------------------
// 2つの引数の文字列を結合する関数を作ってください。
// ①仮引数firstName, lastNameを持つ関数getFullNameを定義してください。
// ②仮引数firstNameとlastNameを結合した文字列を返してください。フルネームなので間に半角スペースを付け加えてください。
// ③関数getFullNameに実引数"Tanaka", "Taro"を渡して実行し、返り値をログ出力してください。

// // ①②に従って関数を定義してください。
// const getFullName = (){
//   // ここに処理を書いてください。
// }
// // ③ログ出力してください。
// console.log();

// ====================================================
// オブジェクト
// ====================================================

// ----------------------------------------------------
// 空のオブジェクト定義
// ----------------------------------------------------
// 空のオブジェクトを定義してください。
// ①定数personにオブジェクトを定義する。
// ここから始めてください

// ----------------------------------------------------
// オブジェクト定義
// ----------------------------------------------------
// プロパティnameがボブ、ageが20であるオブジェクトを定義してください。
// ここから始めてください

// ----------------------------------------------------
// オブジェクトのプロパティの値変更
// ----------------------------------------------------
// オブジェクトのageプロパティの値を30に変更し、ログに出力しよう
// ①ageプロパティに30の数字を代入してください。
// ②コンソール上にobjectを表示させ、ageが変更されていることを確認してください。

// const object = {age: 35, weight: 80};
// // ここから処理を書いてください。

// ----------------------------------------------------
// オブジェクトのプロパティの値変更2
// ----------------------------------------------------
// オブジェクトのageプロパティの値を関数を使って、30に変更し、オブジェクトをログに出力して、ageプロパティが変更されているのを確認しよう
// ①仮引数numberとobjを持つ、関数changeAgeを定義してください
// ②仮引数objのageプロパティの値に対して、numberの値を代入してください。
// ③返り値に仮引数に渡されたobjを設定してください。

// const object = {age: 35, weight: 80};
// // ここから処理を書いてください。

// ----------------------------------------------------
// libraryオブジェクトのopenHourプロパティの値を更新し、ログに出力してみよう
// ----------------------------------------------------
// ①定数libraryの中のopenHourプロパティの値を "8am ~ 9pm"に更新してください。

// const library = {
//   openHour: "7am ~ 10pm"
// };

// ----------------------------------------------------
// オブジェクトのプロパティの値を加算
// ----------------------------------------------------
// オブジェクトのageプロパティの値に+1しましょう。
// ①ageプロパティの値を+1してください。
// ②コンソール上にobjectを表示させ、ageが変更されていることを確認してください。

// const object = {age: 35, weight: 80};
// // ここから処理を書いてください。

// ----------------------------------------------------
// オブジェクトにプロパティweightとその値"50kg"を追加する
// ----------------------------------------------------
// ①weightプロパティに"50kg"の値を持たせて、定数objectに追加してください。
// ②コンソール上にobjectを表示させ、weightが追加されていることを確認してください。

// const object = {name: "Bob", age: 35};
// // ここから処理を書いてください。

// ----------------------------------------------------
// オブジェクトのnameプロパティを削除する
// ----------------------------------------------------
// ①定数objectのnameプロパティを削除してください。
// ②コンソール上にobjectを表示させ、nameが削除されていることを確認してください。

// const object = {name: "Bob", age: 35};
// // ここから処理を書いてください。

// ====================================================
// 配列操作
// ====================================================

// ----------------------------------------------------
// 空の配列を定義する
// ----------------------------------------------------
// ここから処理を書いてください。

// ----------------------------------------------------
// 文字列要素"りんご"、"みかん"、"いちご"が入った配列を定義する
// ----------------------------------------------------
// 文字列要素"りんご"、"みかん"、"いちご"が入った配列を定義してください。
// ここから処理を書いてください。

// ----------------------------------------------------
// 配列の2番目の要素をログ出力する
// ----------------------------------------------------
// 配列の2番目の要素をログ出力してください。
// "const arr = ["りんご","みかん","いちご"];
// // arr[インデックス]のように書きましょう

// ----------------------------------------------------
// 配列の3番目の要素を”もも”に変更してログ出力する
// ----------------------------------------------------
// 配列の3番目の要素を”もも”に変更してログ出力してください。

// const arr = ["りんご","みかん","いちご"];
//   // ここに処理を書いてください。

// ----------------------------------------------------
// 配列内の要素をすべて足し合わせる
// ----------------------------------------------------
// 配列arrayの要素を全て足し合わせた結果を変数result代入して、コンソールに出力してください。

// const array = [1, 2, 3, 4, 5];
// let total = 0;

// ----------------------------------------------------
// 配列内の要素をすべて足し合わせる（関数）
// ----------------------------------------------------
// 配列の要素を全て足し合わせた合計を計算した値を返す関数calcTotalを実装し、calcTotalの引数に定義したarrayを渡した際の実行結果を変数resultに代入し、変数resultの値をコンソールに出力してください。

// const array = [1, 2, 3, 4, 5];
// const calcTotal = () => "";
// const result = calcTotal(array);

// ----------------------------------------------------
// スプレッド構文を用いて配列の要素を展開する①
// ----------------------------------------------------
// 配列arrayの要素をarrayCloneでスプレッド構文を使用して展開し、arrayのクローンを作成してください。

// const array= [1,2,3,4,5];
// // const arrayClone =

// ----------------------------------------------------
// スプレッド構文を用いて配列の要素を展開する②
// ----------------------------------------------------
// 配列arrayの要素をarray2で展開し、新たな要素、6,7,8,9,10を追加した新しい配列を作成してください。

// const array= [1,2,3,4,5];
// // const array2 =

// ----------------------------------------------------
// スプレッド構文を用いて配列の要素を展開する③
// ----------------------------------------------------
// 配列arrayと配列array2をマージした新たな配列array3をスプレッド構文を使用して作成してください。

// const array= [1,2,3,4,5];
// const array2 = [6,7,8,9,10];
// // const array3 =

// ====================================================
// 配列オブジェクト操作
// ====================================================

// ----------------------------------------------------
// 複数のオブジェクト要素を持つ配列の定義
// ----------------------------------------------------
// ①変数objectにid、name、ageプロパティを持つオブジェクト要素の配列を定義してください。
// それぞれidは1,2,3、nameは"ジョン","ボブ","マイケル"、ageは15,20,30とします。
// const object =

// ----------------------------------------------------
// 配列オブジェクト複数のオブジェクト要素を持つ配列からオブジェクト取得
// ----------------------------------------------------
// 複数のオブジェクト要素を持つ配列の2番目の要素をコンソールに出力してください。

// const object = [
//     {id: 1, name: 'John', age: 15},
//     {id: 2, name: 'Bob', age: 20},
//     {id: 3, name: 'Michael', age: 15},
//   ];
//  // ここに処理を書いてください。

// ----------------------------------------------------
// 複数のオブジェクト要素を持つ配列からプロパティの値取得
// ----------------------------------------------------
// 複数のオブジェクト要素を持つ配列の3番目の要素のageを取得してログ出力する

// const object = [
//     {id: 1, name: 'John', age: 15},
//     {id: 2, name: 'Bob', age: 20},
//     {id: 3, name: 'Michael', age: 15},
//   ];
//  // ここに処理を書いてください。

// ====================================================
// スプレッド構文
// ====================================================
// ----------------------------------------------------
// 配列をコピーして、新しい配列を作成しよう
// ----------------------------------------------------
// ①スプレッド構文を使用し、配列arrをコピーしよう。
// ②新しく作成した配列をログで出力し、確認する。

// const arr = [10, 20];
// const newArr =

// ----------------------------------------------------
// 配列の中に要素を追加して、新しい配列を作成しよう
// ----------------------------------------------------
// ①配列colorに"blue", "orange"の要素を追加して、コピーしよう。
// ②新しく作成した配列をログで出力し、確認する。

// const color = ["red", "blue", "yellow"];
// const newColor =

// ----------------------------------------------------
// 2つの配列を結合して、新しい配列を作成しよう
// ----------------------------------------------------
// ①スプレッド構文を使用し、配列arrとstrを結合してみよう。
// ②新しく作成した配列をログで出力し、確認する。

// const arr = [10,20];
// const str = ["10", "20"];
// const match =

// ----------------------------------------------------
// オブジェクトをコピーして、新しいオブジェクトを作成しよう
// ----------------------------------------------------
// ①スプレッド構文を使用し、personオブジェクトをコピーしよう。
// ②新しく作成した配列をログで出力し、確認する。

// const person = { id: 4, name: "鈴木" };
// const copyPerson =

// ----------------------------------------------------
// オブジェクトの中にプロパティを追加して、新しいオブジェクトを作成しよう
// ----------------------------------------------------
// ①personオブジェクトに、' age: 24, job: "programmer" 'のプロパティを追加し、コピーしてみよう
// ②新しく作成した配列をログで出力し、確認する。

// const person = { id: 4, name: "鈴木" };
// const newPerson =

// ----------------------------------------------------
// 2つのオブジェクトを結合して、新しいオブジェクトを作成しよう
// ----------------------------------------------------
// ①スプレッド構文を使用し、{ country: "America", job: "software engineer" } を結合してみよう。
// ②新しく作成した配列をログで出力し、確認する。

// const person = { name: "Mike", age: 23 };
// const personInfo =

// ====================================================
// 分割代入
// ====================================================

// ----------------------------------------------------
// アラート
// ----------------------------------------------------
// 「アラートです。」というアラートを表示しましょう。

// const message = "アラートです。";
// // ここから処理を書いてください

// ----------------------------------------------------
// 確認アラート
// ----------------------------------------------------
// confirmメソッドを使用し、名前が間違っていないか確認するポップアップを表示させてましょう。
// ①confirmメソッドを使用し、nameをダイアログで表示してみよう。
// ②if文を使って条件分岐をし、trueなら' ようこそnameさん ' 、falseなら正しい名前を入力してくださいとログで表示させてみよう。

// const name = "鈴木";
// // ここから処理を書いてください

// ----------------------------------------------------
// 動的確認アラート
// ----------------------------------------------------
// confirmメソッドを使用し、名前が間違っていないか確認するポップアップを表示させてましょう。
// ①confirmメソッドを使用し、テンプレートリテラルでnameをダイアログで表示してみよう。
// ②if文を使って条件分岐をし、trueなら' ようこそnameさん 'をテンプレートリテラルで表記し、falseなら正しい名前を入力してくださいとログで表示させてみよう。

// const name = "田中";
// // ここから処理を書いてください
