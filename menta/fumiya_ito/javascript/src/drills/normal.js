// ====================================================
// 文字列
// ====================================================

// ----------------------------------------------------
// 一つの文字列置換
// ----------------------------------------------------
// 文字列"あいうえお"に含まれる"あ"を"お"に変換してください。
// ①課題通りにstrの文字列を変換し、新しい文字列を定数newStrとして定義してください。
// ②strとnewStrの値をログで出力し、値が変更されていることを確認する。

// ```
var str = "あいうえお";
var newStr = str.replace("あ", "お");
console.log(str);
console.log(newStr);
// ```

// ----------------------------------------------------
// すべての文字列置換
// ----------------------------------------------------
// 文字列"あああああ"に含まれる"あ"を全て"お"に変換してください。
// ヒント：正規表現を用いて解いてみましょう

// ```
var str = "あああああ";
// ここから処理を書いてください
var newStr = str.replace(/あ/g, "お");
console.log(str);
console.log(newStr);
// ```

// ----------------------------------------------------
// 文字列の配列化
// ----------------------------------------------------
// 文字列"あいうえお"を1文字ずつ分けて配列に入れてください。
// ①stringメソッドのsplitを使用して、課題を解いてみましょう。
// ②スプレッド構文を使用して課題を解いてみましょう。
// ③正しく実行できているか、ログで出力して確認してください。

// ```
var str = "あいうえお";
var answer1 = str.split("");
var answer2 = [...str];
// ここに処理を書いてください。
console.log(str);
console.log(answer1);
console.log(answer2);

// ```

// ----------------------------------------------------
// 文字列抽出
// ----------------------------------------------------
// 文字列"あいうえおかきくけこ"から"あいうえお"を抜き出した新しい文字列を定義し、ログに出力してください。
// ①sliceメソッドを使用して、課題を解いてみましょう。
// ②正しく実行できているか、ログで出力して確認してください

// ```
var str = "あいうえおかきくけこ";
var newstr = str.slice(0, 5);
console.log(newstr);

// ```

// ----------------------------------------------------
// 文字列分割
// ----------------------------------------------------
// 対象の文字列を指定した文字で分割し、分割した配列を一つづつログ出力してください。
// ①文字列メソッドのsplitを使用し、" "で定数greetingの文字列を分割し、新しい配列を作成する。
// ②配列メソッドのforEachを使用し、コンソールにログを分割した文字列をそれぞれ表示させる。

// ```
var greeting = "Hi my name is Bob!";
var greetingArray = greeting.split(" ");
// ここから処理を書いてください
greetingArray.forEach((str) => {
  console.log(str);
});
// ```

// ====================================================
// 関数
// ====================================================

// ----------------------------------------------------
// 引数文字列の文字数を返す関数2;
// ----------------------------------------------------
// ①引数の文字数を返す関数を作ってください。
// (引数に文字列以外が入力されたときにエラー("引数は文字列である必要があります")が表示されるようにしよう)
// ②引数に文字列を渡して数値が返ってくることをログ出力して確認してください。
// ③引数に数値を渡してエラーが返ってくることをログ出力して確認してください。

// ```
// ①に従って関数を定義してください。
var getStringLength = (str) => {
  // ここに処理を書いてください。
  if (typeof str !== "string") {
    throw new Error("引数は文字列である必要があります");
  }
  return str.length;
};
// ②ログ出力してください。
console.log(getStringLength("hoge"));
// console.log(getStringLength(1));
// ```

// ----------------------------------------------------
// 引数が文字列か判定する関数;
// ----------------------------------------------------
// 引数が文字列ならtrue、それ以外ならfalseを返す関数を作ってください。
// ①仮引数parameterを持つ関数isStringを定義してください。
// ②仮引数parameterが文字列ならtrue、それ以外ならfalseを返してください。
// ③関数isStringに実引数3を渡して実行し、返り値をログ出力してください。

// ```
// ①②に従って関数を定義してください。
var isString = (parameter) => {
  // ここに処理を書いてください。
  return typeof parameter === "string";
};
// ③ログ出力してください。
console.log(isString("hoge"));
console.log(isString(1));
// ```

// ----------------------------------------------------
// 引数の最初の文字を返す関数;
// ----------------------------------------------------
// 引数の最初の文字を返す関数を作ってください
// ①仮引数strを持つ関数getFirstCharを定義してください。
// ②仮引数strの最初の文字を返してください。
// ③関数getFirstCharに実引数appleを渡して実行し、返り値をログ出力してください。

// ```
// ①②に従って関数を定義してください。
var getFirstChar = (str) => {
  // ここに処理を書いてください。
  return str.slice(0, 1);
};
// ③ログ出力してください。
console.log(getFirstChar("apple"));
// ```

// ----------------------------------------------------
// 引数の最後の文字を消す関数;
// ----------------------------------------------------
// 引数の最後の文字を消す関数を作ってください。
// ①仮引数strを持つ関数popStringを定義してください。
// ②仮引数strの最後の文字を消してください。
// ③関数popStringに実引数appleを渡して実行し、返り値をログ出力してください。

// ```
// ①②に従って関数を定義してください。
var popString = (str) => {
  // ここに処理を書いてください。
  return str.slice(0, -1);
};
// ③ログ出力してください。
console.log(popString("apple"));
// ```

// ----------------------------------------------------
// 引数の最初の文字を消す関数;
// ----------------------------------------------------
// 引数の最初の文字を消す関数を作ってください。
// ①仮引数strを持つ関数removeFirstCharを定義してください。
// ②仮引数strの最初の文字を返してください。
// ③関数removeFirstCharに実引数appleを渡して実行し、返り値をログ出力してください。

// ```
// ①②に従って関数を定義してください。
var removeFirstChar = (str) => {
  // ここに処理を書いてください。
  return str.slice(1);
};
// ③ログ出力してください。
console.log(removeFirstChar("apple"));

// ```

// ----------------------------------------------------
// true, falseを逆にする関数;
// ----------------------------------------------------
// true,falseを逆にする関数
// ①仮引数validを持つ関数toggleBooleanを定義してください。
// ②仮引数validのboolean値を逆にしてください。
// ③関数toggleBooleanに実引数trueを渡して実行し、返り値をログ出力してください。

// ```
// ①②に従って関数を定義してください。
var toggleBoolean = (valid) => {
  // ここに処理を書いてください。
  return !valid;
};
// ③ログ出力してください。
console.log(toggleBoolean(true));
console.log(toggleBoolean(false));
// ```

// ----------------------------------------------------
// 配列をカンマ区切りの文字列にする関数;
// ----------------------------------------------------
// 配列の中身を結合してカンマ区切りの文字列にする関数を作ってください。
// ①仮引数arrを持つ関数answerを定義してください。
// ②仮引数arrの配列の中身を結合してカンマ区切りの文字列して返してください。
// ③関数answerの実引数に["apple", "orange", "melon"]を持つ配列を渡して実行し、返り値をログ出力してください。

// ```
// ①②に従って関数を定義してください。
var answer = (arr) => {
  // ここに処理を書いてください。
  return arr.join(",");
};
// ③ログ出力してください。
var arr = ["apple", "orange", "melon"];
console.log(answer(arr));
// ```

// ====================================================
// オブジェクト
// ====================================================

// ----------------------------------------------------
// オブジェクトのプロパティの値取得
// ----------------------------------------------------
// オブジェクトのnameプロパティの値をログに出力しましょう。

// ```
var object = { name: "Bob", age: 20 };
// ここから始めてください
console.log(object.name);

// ```

// ----------------------------------------------------
// オブジェクトのプロパティの値取得2
// ----------------------------------------------------
// オブジェクトのnameプロパティの値を関数を使ってログに出力しましょう。
// ①仮引数objectを持つ関数getObjectNameを定義してください。
// ②仮引数objectのnameプロパティの値を返してください。
// ③関数getObjectNameの実引数にobjectを渡して実行し、返り値をログ出力してください。
// ```
var object = { name: "Bob", age: 20 };

var getObjectName = (object) => object.name;
console.log(getObjectName(object));
// ```

// ----------------------------------------------------
// オブジェクトのプロパティの値を更新する②
// ----------------------------------------------------
// ①定数libraryの中のオブジェクトbookのyearプロパティの値を"10/22/1876"に更新してください。

// ```
var library = {
  book: {
    author: "Tom Sawyer",
    year: "11/12/2021",
  },
};
console.log(library.book.year);
library.book.year = "10/22/1876";
console.log(library.book.year);
// ```

// ----------------------------------------------------
// オブジェクトのageプロパティの値を関数を使って、+1増やして、ログに出力しよう
// ----------------------------------------------------
// ①仮引数objを持つ、関数plusAgeを定義してください。
// ②仮引数objのageプロパティの値を+1にしてみよう。
// ③返り値に仮引数に渡されたobjを設定してください。
// ④ログで確認してみよう。

// ```
var object = { age: 35, weight: 80 };
var plusAge = (obj) => {
  obj.age += 1;
  return obj;
};
// ここから処理を書いてください。
console.log(plusAge(object));

// ```

// ----------------------------------------------------
// 関数の引数にオブジェクトと値を渡すとプロパティweightとその値を追加する関数を作成し、ログに出力してみよう
// ----------------------------------------------------
// ①関数 addWeightの仮引数にpersonObjectとweightNumを渡してください。
// ①変数personのweightプロパティに"50kg"の値を持たせて、追加してください。
// ②返り値にpersonObjectを返すように実装してください
// ③addWeightにpersonと50を引数に渡して実行してください。
// ④コンソール上にaddWeightの実行結果を表示させ、weightが追加されていることを確認してください。

// ```
var person = { name: "Bob", age: 35 };
// ここから処理を書いてください。
var addWeight = (personObject, weightNum) => {
  personObject.weight = weightNum;
  return personObject;
};

console.log(addWeight(person, "50kg"));

// ```

// ----------------------------------------------------
// オブジェクトのプロパティに複数の値を持つhobby配列を追加する
// ----------------------------------------------------
// ①定数personの中にhobbyプロパティを定義してください。
// ②hobbyプロパティの値にreadingとshoppingを格納した配列を追加する。
// ③それぞれコンソール上にreading, shoppingと出力されるようにログ出力してください。

// ```
var person = { name: "Bob", age: 35 };
// ここから処理を書いてください。
person.hobby = ["reading", "shopping"];
console.log(person.hobby[0]);
console.log(person.hobby[1]);

// ```

// ----------------------------------------------------
// オブジェクトのnameプロパティを削除する前に実行確認した上で、OKの場合のみ削除されるようにしよう
// ----------------------------------------------------
// ①confirmメソッドを使用し、削除する前にダイアログを表示させてみよう。
// ②if文を使って、trueならnameプロパティを削除してみよう。
// ③nameが削除されているか、ログで確認してみよう。

// ```
var object = { name: "Bob", age: 35 };
// ここから処理を書いてください。
// if (confirm("is it okay to remove?")) {
//   delete object.name;
// }

console.log(object);

// ```

// ----------------------------------------------------
// 引数にオブジェクトと消去したいプロパティ名を渡すことでオブジェクトのプロパティを削除することができる関数を作成し、ログ出力でプロパティが削除できたことを確認する
// ----------------------------------------------------
// ①問題の指示に従って、deleteProperty関数を実装してください。
// ②deleteProperty関数の引数にuserオブジェクトとageプロパティを渡して、実行してください。その結果をログに出力し、ageプロパティが削除されていることを確認してください。

// ```
var user = { name: "Bob", age: 35 };
var deleteProperty = (userObj, property) => {
  // ここから処理を書いてください。
  delete userObj[property];
  return userObj;
};

console.log(deleteProperty(user, "age"));
// ```

// ====================================================
// 配列操作
// ====================================================
// ----------------------------------------------------
// 配列の最後に文字列要素"すいか"を追加する
// ----------------------------------------------------
// 配列の最後に文字列要素"すいか"を追加してください。
// ```
var arr = ["りんご", "みかん", "いちご"];
// ここに処理を書いてください。
arr.push("suika");
console.log(arr);

// ```

// ----------------------------------------------------
// 配列の最後の要素を削除する
// ----------------------------------------------------
// 配列の最後の要素を削除してください。

// ```
var arr = ["りんご", "みかん", "いちご"];
// ここに処理を書いてください。
arr.pop();
console.log(arr);

// ```

// ----------------------------------------------------
// 配列の最初に文字列要素"すいか"を追加する
// ----------------------------------------------------
// 配列の最初に文字列要素"すいか"を追加してください。

// ```
var arr = ["りんご", "みかん", "いちご"];
// ここに処理を書いてください。
arr.unshift("suika");
console.log(arr);

// ```

// ----------------------------------------------------
// 配列の最初の要素を削除する
// ----------------------------------------------------
// 配列の最初の要素を削除してください。

// ```
var arr = ["りんご", "みかん", "いちご"];
// ここに処理を書いてください。
arr.shift();
console.log(arr);

// ```

// ----------------------------------------------------
// 配列から"みかん"のindexを取得する
// ----------------------------------------------------
// 配列から"みかん"のindexを取得してください。
// ```
var arr = ["りんご", "みかん", "いちご"];
// ここに処理を書いてください。
console.log(arr.indexOf("みかん"));
// ```

// ----------------------------------------------------
// 配列に"りんご"が含まれているか確かめる
// ----------------------------------------------------
// 配列arrayの中に"りんご"が含まれているか確かめてください。
// ```
var arr = ["りんご", "みかん", "いちご"];
// りんごが含まれていたらtrueを代入してください。
var answer = arr.includes("りんご");
console.log(answer);

// ```

// ----------------------------------------------------
// 配列の2番目の要素と3番目の要素からなる配列を作る
// ----------------------------------------------------
// 配列arrayの2番目と3番目だけを格納した配列を作成してください。
// ```
// 2番目の要素と3番目の要素からなる配列をanswer変数に代入してください。
var arr = ["りんご", "みかん", "いちご"];
var answer = arr.slice(1, 3);
console.log(answer);
// ```

// ----------------------------------------------------
// 配列の3番目の要素を削除する
// ----------------------------------------------------
// 配列arrayの3番目の要素を削除してください。
// ```
// 3番目の要素が削除された配列をanswer変数に代入してください。
var arr = ["りんご", "みかん", "いちご"];
var answer = arr.slice(0, 2);
console.log(answer);
// ```

// ----------------------------------------------------
// 配列のそれぞれの要素をログ出力する
// ----------------------------------------------------
// 配列arrayの要素をそれぞれコンソールに出力してください。
// ```
var fruits = ["apple", "orange", "grape"];

fruits.forEach((f) => {
  console.log(f);
});
// ```

// ----------------------------------------------------
// 配列のそれぞれの要素を2倍にしてログ出力する
// ----------------------------------------------------
// 配列arrayの要素をそれぞれ２倍にしてコンソールに出力してください。

// ```
var numbers = [1, 2, 3];

// 配列要素を2倍した配列を定義
var doubleNumbers = numbers.map((n) => {
  return n * 2;
});

// 関数を発火してログ出力
console.log(doubleNumbers); // [2, 4, 6]
// ```

// ----------------------------------------------------
// 配列のそれぞれの要素を3倍に加工した配列を取得する
// ----------------------------------------------------
// 配列arrayの要素をそれぞれ３倍にした配列を取得してください。

// ```
var numbers = [1, 2, 3];
var tripleNumbers = numbers.map((n) => {
  return n * 3;
});
console.log(tripleNumbers);
// ```

// ----------------------------------------------------
// 配列の中で3文字の要素のみに絞り込んだ配列を取得する
// ----------------------------------------------------
// 配列arrayの要素の中で３文字である要素のみ取得してください。

// ```
var fruits = ["apple", "grape", "fig"];

var answer = fruits.filter((f) => f.length === 3);
console.log(answer);
// ```

// ----------------------------------------------------
// オブジェクト配列からあるプロパティのみの配列を取得する
// ----------------------------------------------------
// 変数dataに入っているオブジェクトに対してkeysメソッドを使用し,プロパティ名を配列で取得しよう

// ```
var data = {
  id: 107,
  name: "Bob",
  job: "programmer",
};

var keys = Object.keys(data);
console.log(keys);
// ```

// ----------------------------------------------------
// 文字コード順に並べ替える
// ----------------------------------------------------
// 配列arrayの要素を文字コード順に並びかえてください。

// ```
var array = ["いぬ", "さる", "きじ"];
array.sort();
console.log(array);

// ```

// ----------------------------------------------------
// 配列を逆順にする
// ----------------------------------------------------
// 配列を逆順にしてください。

// ```
var arr = ["りんご", "みかん", "いちご"];
// ここに処理を書いてください。
arr.reverse();
console.log(arr);

// ```

// ----------------------------------------------------
// 昇順ソートする
// ----------------------------------------------------
// 配列arrayの要素を昇順に並びかえてください。
// ```
var array = [1975, 11, 20];
array.sort((a, b) => a - b);
console.log(array);

// ```

// ----------------------------------------------------
// 降順ソートする
// ----------------------------------------------------
// 配列arrayの要素を降順に並びかえてください。

// ```
var array = [1975, 11, 20];
array.sort((a, b) => b - a);
console.log(array);
// ```

// ----------------------------------------------------
// 配列内の要素をすべて足し合わせる（reduce）
// ----------------------------------------------------
// 配列arrayの要素を全て足し合わせて変数resultに返してください。

// ```
var array = [1, 2, 3, 4, 5];

var result = array.reduce((sum, current) => (sum += current), 0);
console.log(result);

// ```

// ----------------------------------------------------
// 配列の全要素を引数の文字列で連結させる
// ----------------------------------------------------
// ```
var array = ["りんご", "みかん", "いちご"];
// ここに処理を書いてください。
console.log(array.join(","));
// ```

// ====================================================
// 配列オブジェクト操作
// ====================================================

// ----------------------------------------------------
// 配列オブジェクトから特定のオブジェクト取得;
// ----------------------------------------------------
// 配列内のオブジェクトのidプロパティが2のオブジェクト要素を取得する。
// ①配列メソッドのfindを使用し、条件に最初に一致した要素を定数として定義する。
// ②定義した定数をログで出力し、確認する
//

// ```
var object = [
  { id: 1, name: "John", age: 15 },
  { id: 2, name: "Bob", age: 20 },
  { id: 3, name: "Michael", age: 15 },
];
// ここに処理を書いてください。
// ```

// ----------------------------------------------------
// 配列オブジェクト絞り込み取得1;
// ----------------------------------------------------
// 配列内のオブジェクトのnameプロパティの文字列が3文字のオブジェクト要素からなる配列を取得してください。
// ```
// var object =
// var found =
// ```

// ----------------------------------------------------
// 配列オブジェクト絞り込み取得2;
// ----------------------------------------------------
// 配列内のオブジェクトのageプロパティが15のオブジェクト要素を全て取得してください。
// ①配列メソッドのfilterを使用し、条件に一致した要素を全て含んだ配列を定数として定義する。
// ②定義した定数をログで出力し、確認する
//

// ```
var object = [
  { id: 1, name: "John", age: 15 },
  { id: 2, name: "Bob", age: 20 },
  { id: 3, name: "Michael", age: 15 },
];
// ここに処理を書いてください。
// ```

// ----------------------------------------------------
// 配列オブジェクト絞り込み取得3;
// ----------------------------------------------------
// 配列内のオブジェクトのidプロパティが1の要素を除いた配列を取得してください。
// ```
var object = [
  { id: 1, name: "John", age: 15 },
  { id: 2, name: "Bob", age: 20 },
  { id: 3, name: "Michael", age: 15 },
];
// var found =
// ```

// ----------------------------------------------------
// 配列オブジェクトの特定の要素削除;
// ----------------------------------------------------
// 配列内のオブジェクトのageプロパティが15の要素を削除してください。
// ```

// var object =

// var filteredObject =
// ```

// ----------------------------------------------------
// 配列オブジェクトのプロパティ値更新;
// ----------------------------------------------------
// 配列内のオブジェクトのageプロパティに+1してください。
// ```

var users = [
  { id: 1, name: "John", age: 15 },
  { id: 2, name: "Bob", age: 20 },
  { id: 3, name: "Michael", age: 15 },
];
var newUsers = users;
// ```

// ----------------------------------------------------
// 配列オブジェクトのプロパティ値更新2;
// ----------------------------------------------------
// 配列内のオブジェクトのnameプロパティの頭に`Mr. `をつけてください。

// ```
var users = [
  { id: 1, name: "John", age: 15 },
  { id: 2, name: "Bob", age: 20 },
  { id: 3, name: "Michael", age: 15 },
];
var newUsers = users;
// ```

// ====================================================
// スプレッド構文
// ====================================================

// ----------------------------------------------------
// オブジェクトのプロパティの値を変更して、新しいオブジェクトを作成しよう
// ----------------------------------------------------
// ①スプレッド構文を使用し、プロパティnameの値を'Alice'に変更しよう。
// ②personオブジェクト内に、' country: ""America"", job: ""software engineer"" 'のプロパティを追加しよう。
// ③新しく作成した配列をログで出力し、確認する。

// ```
var person = { name: "Mike", age: 23 };
// var newPerson = // nameの値を変更
// var personInfo =
// ```

// ====================================================
// 分割代入
// ====================================================

// ----------------------------------------------------
// JSONplaceholderのfetch
// ----------------------------------------------------
// JSONplacehokderのダミーデータをfetchメソッドを使用してダミーデータを取得しよう
// ①"https://jsonplaceholder.typicode.com/users"
// ②①のURLを使ってダミーデータを取得し、コンソールログに表示させてください。

// ```
// "https://jsonplaceholder.typicode.com/users"

// ```

// ----------------------------------------------------
// JSONplaceholderのfetch絞り込み
// ----------------------------------------------------
// JSONplacehokderのダミーデータを使って、idが5のデータをログに表示させてみよう
// ①"https://jsonplaceholder.typicode.com/users"

// ```
// "https://jsonplaceholder.typicode.com/users"

// ```

// ----------------------------------------------------
// 言語ごとにURL生成
// ----------------------------------------------------
// 引数に渡された言語によって、どのURLにリダイレクトするのかを決める関数を作成してください。
//     languageがEnglishの場合→example.com/en
//     languageがJapaneseの場合→example.com/ja
//     languageがAustraliaの場合→example.com/en-au
// 上記の３のどれでもない場合、example.comを返してください。
// ①仮引数languageを持つ関数redirectUrlを定義してください。
// ②仮引数languageの言語によって、どのURLにリダイレクトするのかを決める関数を作成してください。
// ③関数redirectUrlに実引数"English"を渡して実行し、返り値をログ出力してください。

// ```
// ①②に従って関数を定義してください。
function redirectUrl(language) {
  let url = "www.example.com";
  // switch文を書いてください。
}
// ③ログ出力してください。
console.log();
// ```
