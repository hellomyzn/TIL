// 配列操作/push
// 配列の末尾に要素を追加するためのメソッドです。
// 配列.push(追加する要素)

// 例1: 配列の末尾に4を追加
[1, 2, 3].push(4); // [1, 2, 3, 4]
// 配列[1, 2, 3]に対して、末尾に要素4を追加して、
// 配列[1, 2, 3, 4]となります。

// 例2:配列の末尾に"ぶどう"を追加
["りんご", "みかん"].push("ぶどう"); // ['りんご', 'みかん', 'ぶどう']
// 配列['りんご', 'みかん']に対して、末尾に要素'ぶどう'を追加し、
// 配列['りんご', 'みかん', 'ぶどう']となります。

// 配列操作/unshift
// unshiftメソッドを呼び出すと、配列の先頭に要素を追加し、その後の新しい配列の長さを返します。

// 例1 配列[1, 2, 3]に対して、10を追加
var numbers = [1, 2, 3];
var newLength = numbers.unshift(10); // newLengthは4
console.log(numbers); // [10, 1, 2, 3]

// 例2 配列['りんご', 'みかん', 'ぶどう']に対して、'なし'を追加
var fruits = ["りんご", "みかん", "ぶどう"];
var newLength = fruits.unshift("なし"); // newLengthは4
console.log(fruits); // ['なし', 'りんご', 'みかん', 'ぶどう']

// 配列操作/pop
// popメソッドを呼び出した配列の最後の要素を取り出す
// 例1 配列[1, 2, 3, 10]に対して、10を取り出します
[1, 2, 3, 10].pop(); // [1, 2, 3]

// 例2: 配列['りんご', 'みかん', 'ぶどう', '豚肉']に対して、'豚肉'を取り出します
["りんご", "みかん", "ぶどう", "豚肉"].pop(); // ['りんご', 'みかん', 'ぶどう']

// 配列操作/shift
// shiftメソッドを呼び出した配列の先頭の要素を取り出します

// 例1 配列[10, 1, 2, 3]に対して、10を取り出します
[10, 1, 2, 3].shift(); // [1, 2, 3]

// 例2: 配列['豚肉', 'りんご', 'みかん', 'ぶどう']に対して、'豚肉'を取り出します
["豚肉", "りんご", "みかん", "ぶどう"].shift(); // ['りんご', 'みかん', 'ぶどう']

// 配列操作/slice
// sliceメソッドは、呼び出し元の配列の指定した範囲にある要素をコピーして、新しい配列を作成します。
// 第一引数には開始位置番号、第二引数には終了位置番号を指定します。開始位置番号は含まれますが、終了位置番号は含まれません。

// 例1 配列[1, 2, 3, 10]に対して、1と2をコピーした配列を作成する
var numbers = [1, 2, 3, 10].slice(0, 2);
console.log(numbers); // [1, 2]

// 例2: 配列['りんご', 'みかん', 'ぶどう', '豚肉']に対して、'りんご'、'みかん'、'ぶどう'をコピーした配列を作成する
var foods = ["りんご", "みかん", "ぶどう", "豚肉"].slice(0, 3);
console.log(foods); // ['りんご', 'みかん', 'ぶどう']

// 例3: 配列['りんご', 'みかん', 'ぶどう', '豚肉']に対して、'豚肉'をコピーした配列を作成する
// 終了位置番号を指定しないと、開始位置番号から最後までの要素がコピーされる
var foods = ["りんご", "みかん", "ぶどう", "豚肉"].slice(3);
console.log(foods); // ['豚肉']

// 例4: 配列[1, 2, 3]をコピーした配列を作成する
// 開始位置番号を0にすると、配列の最初から最後まで全ての要素がコピーされる
var numbers = [1, 2, 3].slice(0);
console.log(numbers); // [1, 2, 3]

// 配列操作/splice
// spliceメソッドは、呼び出し元の配列の要素を取り除いたり、置き換えたり、新しい要素を追加したりします。新しい配列は作られず、呼び出し元の配列が変更されます。

// 引数
// 最初の引数に削除を開始する位置、2番目の引数に削除する要素の数、その後の引数に追加する要素を指定します
// array.splice(開始位置番号, 削除する要素数, 追加する要素1, 追加する要素2, ...追加する要素N)

// 戻り値
// 取り除かれた要素を含む配列が返されます。

// 例1: 配列[1000, 2000, 3000, 4000]に対して、1000を取り除く
var thousands = [1000, 2000, 3000, 4000];
thousands.splice(0, 1);
console.log(thousands); // [2000, 3000, 4000]

// 例2: 配列[1, 3, 5, 7, 9]に対して、3番目に100, 200を追加する
var singleNumbers = [1, 3, 5, 7, 9];
singleNumbers.splice(2, 0, 100, 200);
console.log(singleNumbers); // [1, 3, 100, 200, 5, 7, 9]

// 配列操作/forEach
// forEachメソッドは、配列の各要素に対して順番に処理を行います。これを使うと、1つ1つの要素に同じ操作を簡単に実行することができます。

// 例1 配列fruitsの各要素をコンソールに出力する
var fruits = ["りんご", "バナナ", "オレンジ"];
fruits.forEach((fruit) => console.log(fruit));
// りんご
// バナナ
// オレンジ

// 例2 配列oddNumbersの各要素を2倍にしてコンソールに出力する
var oddNumbers = [1, 3, 5, 7, 9];
oddNumbers.forEach((oddNumber) => console.log(oddNumber * 2));
// 2
// 6
// 10
// 14
// 18

// 配列操作/map
// mapメソッドは呼び出し元の配列の各要素に対して処理を行い、新しい配列を作ります。

// 例1 配列pricesの各要素を2倍にする
var prices = [1000, 2000, 3000, 4000];
var doubledPrices = prices.map((price) => price * 2);
console.log(doubledPrices); // [2000, 4000, 6000, 8000]

// 例2 配列citiesの各要素を大文字にする
var cities = ["tokyo", "new york", "london"];
console.log(cities.map((city) => city.toUpperCase())); // ['TOKYO', 'NEW YORK', 'LONDON']

// 例3 配列usersの各要素のnameプロパティの値の先頭にMr.を追記する
var users = [
  { name: "Smith" },
  { name: "Johnson" },
  { name: "Williams" },
  { name: "Brown" },
];
console.log(users.map((user) => "Mr. " + user.name)); // ['Mr. Smith', 'Mr. Johnson', 'Mr. Williams', 'Mr. Brown']

// forEachメソッドとの違い
// mapメソッドは、forEachメソッドと混同されやすいです。初めは使い分けが難しいですが、両者には大きな違いがあります。forEachメソッドは各要素に処理を実行するだけであるのに対して、 mapメソッドは新しい配列を返します。
// 新しい配列を必要としない場合や値を返す必要がない場合は、forEachメソッドを使用しましょう。
var arr = [1, 2, 3];

// forEachメソッドの場合は返り値がundefinedとなる
var forEachValue = arr.forEach((value) => {
  return value * 100;
});
console.log(forEachValue); //undefined

// mapメソッドの場合は返り値が新しい配列となる
var mapEachValue = arr.map((value) => {
  return value * 100;
});
console.log(mapEachValue); //[100, 200, 300]

// 配列操作 / join
// joinメソッドを呼び出した配列の要素を文字列として結合します

// 例1 配列['Hello', 'World']の要素を区切り文字','で結合して、「'Hello,World'」という文字列を作成します
console.log(["Hello", "World"].join()); // 'Hello,World'

// 例2 配列['Hello', 'World']の要素を区切り文字'/'で結合して、「'Hello/World'」という文字列を作成します
console.log(["Hello", "World"].join("/")); // 'Hello/World'

// 配列操作/concat
// concatメソッドを呼び出した配列に、引数へ渡された配列を結合し、新しい配列として、返す

// 例1: 配列[1000, 2000]に対して、配列[3000, 4000]を結合します
console.log([1000, 2000].concat([3000, 4000])); // [1000, 2000, 3000, 4000]
